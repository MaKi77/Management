package com.rest.domain.device.entity;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Set;
import java.util.stream.Collectors;

import javax.persistence.CascadeType;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.OneToMany;
import javax.xml.bind.annotation.XmlRootElement;

import org.apache.commons.collections4.map.HashedMap;

import com.google.common.base.Preconditions;

@Entity
@XmlRootElement
public class DeviceEntity {
	
	private static final int FIRST_AVAILABLE_TYPE_ID = 1;
	private static final int UNASSIGNED_TYPE_ID_INDICATOR = 0;
	private static final int UNASSIGNED_ID_INDICATOR = 0;

	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	private int id;
	private int typeId;
	private String identifier;
	private DeviceType type;
	private int serialNumber;
	private int partNumber;

	@OneToMany(cascade = CascadeType.ALL, orphanRemoval = true)
	@JoinColumn(name = "device_id")
	private List<CardEntity> connectedCards;
	
	DeviceEntity() {}

	private DeviceEntity(DeviceEntityBuilder builder) {
		this.id = builder.id;
		this.typeId = builder.typeId;
		this.identifier = builder.identifier;
		this.type = builder.type;
		this.serialNumber = builder.serialNumber;
		this.partNumber = builder.partNumber;
		this.connectedCards = builder.connectedCards;
	}

	public int getId() {
		return id;
	}

	public int getTypeId() {
		return typeId;
	}

	public String getIdentifier() {
		return identifier;
	}

	public void assignIdentifiers(int typeId) {
		assignIdentifierForDevice(typeId);
		assignIdentifiersForConnectedCards();
	}

	private void assignIdentifierForDevice(int typeId) {
		this.typeId = typeId;
		this.identifier = getType() + "_" + typeId;
	}

	private void assignIdentifiersForConnectedCards() {
		HashedMap<CardType, Integer> nextCardNumber = new HashedMap<>();
		Arrays.asList(CardType.values()).forEach(type -> nextCardNumber.put(type, 1));

		for (CardEntity cardEntity : connectedCards) {
			CardType cardType = cardEntity.getType();
			int cardTypeId = nextCardNumber.get(cardEntity.getType());
			cardEntity.assignIdentifierForCard(getIdentifier(), cardTypeId);
			nextCardNumber.put(cardType, cardTypeId + 1);
		}
	}

	public DeviceType getType() {
		return type;
	}

	public int getSerialNumber() {
		return serialNumber;
	}

	public int getPartNumber() {
		return partNumber;
	}

	public List<CardEntity> getConnectedCards() {
		return connectedCards;
	}

	public void setConnectedCards(List<CardEntity> connectedCards) {
		this.connectedCards.clear();
		this.connectedCards.addAll(connectedCards);
	}

	public void ignoreSuppliedAutoGeneratedData() {
		id = UNASSIGNED_ID_INDICATOR;
		typeId = UNASSIGNED_TYPE_ID_INDICATOR;
		identifier = null;
		connectedCards.forEach(CardEntity::ignoreSuppliedAutoGeneratedData);
	}

	public void updateDevice(DeviceEntity deviceEntity) {
		Preconditions.checkArgument(isValid(deviceEntity), "Wrong indentifier, type or typeId for this device");	
		serialNumber = deviceEntity.getSerialNumber();
		partNumber = deviceEntity.getPartNumber();
		updateCards(deviceEntity.getConnectedCards());
	}

	private boolean isValid(DeviceEntity deviceEntity) {
		return (isTypeNotSupplied(deviceEntity) || hasTheSameType(deviceEntity))
				&& (isTypeIdNotSupplied(deviceEntity) || hasTheSameTypeId(deviceEntity))
				&& hasTheSameIdentifer(deviceEntity);
	}

	private boolean hasTheSameIdentifer(DeviceEntity deviceEntity) {
		return deviceEntity.getIdentifier().equals(this.getIdentifier());
	}

	private boolean hasTheSameTypeId(DeviceEntity deviceEntity) {
		return deviceEntity.getTypeId() == this.getTypeId();
	}

	private boolean hasTheSameType(DeviceEntity deviceEntity) {
		return deviceEntity.getType() == this.getType();
	}

	private boolean isTypeNotSupplied(DeviceEntity deviceEntity) {
		return deviceEntity.getType() == null;
	}

	private boolean isTypeIdNotSupplied(DeviceEntity deviceEntity) {
		return deviceEntity.getTypeId() == UNASSIGNED_TYPE_ID_INDICATOR;
	}

	private void updateCards(List<CardEntity> updatedCards) {
		connectedCards.retainAll(updatedCards);

		for (CardEntity updated : updatedCards) {
			boolean isNew = true;
			for (CardEntity connected : connectedCards) {
				if (updated.equals(connected)) {
					connected.updateCard(updated);
					isNew = false;
					break;
				}
			}
			if (isNew) {
				int newCardTypeId = findMinAvailableTypeIdForCard(updated);
				updated.assignIdentifierForCard(getIdentifier(), newCardTypeId);
				connectedCards.add(updated);
			}
		}
	}

	int findMinAvailableTypeIdForCard(CardEntity cardEntity) {
		Set<Integer> alreadyUsedTypeIds = connectedCards.stream()
				.filter(card -> card.getType() == cardEntity.getType())
				.mapToInt(CardEntity::getTypeId)
				.boxed()
				.collect(Collectors.toSet());
		int newTypeId = FIRST_AVAILABLE_TYPE_ID;
		while (alreadyUsedTypeIds.contains(newTypeId)) {
			newTypeId++;
		}
		return newTypeId;
	}

	@Override
	public String toString() {
		return "[" + id + "] - " + identifier;
	}
	
	public static DeviceEntityBuilder builder() {
		return new DeviceEntityBuilder();
	}

	public static class DeviceEntityBuilder {

		private int id;
		private String identifier;
		private DeviceType type;
		private int typeId;
		private int serialNumber;
		private int partNumber;
		
		private List<CardEntity> connectedCards;

		public DeviceEntityBuilder withId(int id) {
			this.id = id;
			return this;
		}

		public DeviceEntityBuilder withIdentifier(String identifier) {
			this.identifier = identifier;
			return this;
		}

		public DeviceEntityBuilder withType(DeviceType type) {
			this.type = type;
			return this;
		}

		public DeviceEntityBuilder withTypeId(int typeId) {
			this.typeId = typeId;
			return this;
		}

		public DeviceEntityBuilder withSerialNumber(int serialNumber) {
			this.serialNumber = serialNumber;
			return this;
		}

		public DeviceEntityBuilder withPartNumber(int partNumber) {
			this.partNumber = partNumber;
			return this;
		}
		
		public DeviceEntityBuilder withCards(List<CardEntity> connectedCards) {
			this.connectedCards = new ArrayList<>(connectedCards);
			return this;
		}

		public DeviceEntity build() {
			return new DeviceEntity(this);
		}

	}

}
